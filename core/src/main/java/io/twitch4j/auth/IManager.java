package io.twitch4j.auth;

import io.twitch4j.enums.Scope;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

public interface IManager {
    /**
     * Getting default <pre>{@link Scope}</pre>
     *
     * @return default scopes
     */
    Set<Scope> getDefaultScopes();

    /**
     * Setting default <pre>{@link Scope}</pre>
     *
     * @param scopes scope collection
     */
    default void setDefaultScopes(Collection<Scope> scopes) {
        setDefaultScopes(new HashSet<Scope>(scopes));
    }

    /**
     * Setting default <pre>{@link Scope}</pre>
     *
     * @param scopes scope sets
     */
    void setDefaultScopes(Set<Scope> scopes);

    /**
     * Add to default <pre>{@link Scope}</pre>
     *
     * @param scope
     */
    default void addScope(Scope scope) {
        getDefaultScopes().add(scope);
    }

    /**
     * Add to default <pre>{@link Scope}</pre>
     *
     * @param scopes array scopes
     */
    default void addScopes(Scope... scopes) {
        addScopes(Arrays.asList(scopes));
    }

    /**
     * Add to default <pre>{@link Scope}</pre>
     *
     * @param scopes scopes collection
     */
    default void addScopes(Collection<Scope> scopes) {
        scopes.forEach(this::addScope);
    }

    /**
     * Build authorization URL to redirect. Only with default scope.
     *
     * @param uri   Your registered redirect URI. This must exactly match the redirect URI registered in the prior, <a href="https://dev.twitch.tv/docs/authentication#registration">Registration</a> step.
     * @param state Your unique token, generated by your application. This is an OAuth 2.0 opaque value, used to avoid CSRF attacks. This value is echoed back in the response. <b>We strongly recommend you use this.</b>
     * @return Your URL to authorize user
     */
    default String buildAuthorizationUri(String uri, String state) {
        return buildAuthorizationUri(uri, getDefaultScopes(), state);
    }

    /**
     * Build authorization URL to redirect.
     *
     * @param uri    Your registered redirect URI. This must exactly match the redirect URI registered in the prior, <a href="https://dev.twitch.tv/docs/authentication#registration">Registration</a> step.
     * @param scopes Collection of {@link Scope}
     * @param state  Your unique token, generated by your application. This is an OAuth 2.0 opaque value, used to avoid CSRF attacks. This value is echoed back in the response. <b>We strongly recommend you use this.</b>
     * @return Your URL to authorize user
     */
    String buildAuthorizationUri(String uri, Collection<Scope> scopes, String state);

    /**
     * Creating credential after granting authorization
     *
     * @param grantCode authorization code received after granting application.
     * @param uri       Your registered redirect URI. This must exactly match the redirect URI registered in the prior, <a href="https://dev.twitch.tv/docs/authentication#registration">Registration</a> step.
     * @param scopes    Collection of {@link Scope}
     * @return your Credential
     */
    ICredential create(String grantCode, String uri, Collection<Scope> scopes);

    /**
     * Rebuilding credentials with missing parameters
     *
     * @param credential old Credential
     * @return your renewal Credential
     */
    ICredential rebuild(ICredential credential);

    ICredential refresh(ICredential credential);
}
