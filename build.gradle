/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'io.ratpack.ratpack-java' version '1.4.6'
}

// In this section you declare where to find the dependencies of your project
repositories {
	maven { url 'https://jitpack.io' }
	mavenCentral()
	jcenter()
}

// Required Java Version
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Doesn't matter, only so that spring doesn't fail
mainClassName = 'me.philippheuer.twitch4j.TwitchClient'

// Method, that gets the total amount of commits in the repository (as build number)
def gitVersion() {
	def counter = 0
	def process = "git rev-list dev --first-parent --count".execute()
	counter = process.text.toInteger()
	return counter
}

// Dependencies
dependencies {
	// Logging
	compile group: 'org.slf4j', 					name: 'slf4j-api', 				version: '1.7.25'
	compile group: 'ch.qos.logback', 				name: 'logback-classic', 		version: '1.2.3'
	compile group: 'com.jcabi', 					name: 'jcabi-log', 				version: '0.17.2'

	// Spring (RestTemplate)
	compile group: 'org.springframework', 			name: 'spring-web', 			version: '4.3.9.RELEASE'
	compile group: 'org.springframework.social', 	name: 'spring-social-core', 	version: '1.1.4.RELEASE'

	// WebSocket Client for Twitch PubSub and Twitch IRC
	compile group: 'com.neovisionaries', 			name: 'nv-websocket-client',	version: '2.3'

	// - Transitive Dependency Conflict: Ratpack <-> Kitteh IRC Client
	compile group: 'io.netty', 						name: 'netty-codec-http', 		version: '4.1.13.Final'
	compile group: 'io.netty', 						name: 'netty-codec', 			version: '4.1.13.Final'
	compile group: 'io.netty', 						name: 'netty-handler', 			version: '4.1.13.Final'
	compile group: 'io.netty', 						name: 'netty-common', 			version: '4.1.13.Final'
	compile group: 'io.netty', 						name: 'netty-transport-native-epoll', version: '4.1.13.Final'

	// Apache Commons
	// - Lang
	compile group: 'org.apache.commons',			name: 'commons-lang3', 			version: '3.6'
	// - IO
	compile group: 'commons-io',					name: 'commons-io', 			version: '2.5'

	// JSON / YAML
	compile group: 'com.fasterxml.jackson.core', 	name: 'jackson-databind', 		version: '2.9.0.pr4'

	// Bucket for rate-limiting
	compile group: 'org.isomorphism', 				name: 'token-bucket', 			version: '1.7'

	// Expiring Map
	compile group: 'net.jodah', 					name: 'expiringmap', 			version: '0.5.8'

	// TypeTools
	compile group: 'net.jodah', 					name: 'typetools', 				version: '0.5.0'

	// Args4J - CommandLineArgumentParser
	compile group: 'args4j', 						name: 'args4j', 				version: '2.33'

	// Getter & Setter
	compile group: 'org.projectlombok', 			name: 'lombok', 				version: '1.16.18'

	// Testing
	testCompile group: 'junit', 					name: 'junit', 					version: '4.12'
}

/**
 * Define SourceSets
 */
sourceSets {
	main {
		java.srcDir 'src/main/java'
	}
	test {
		java.srcDir 'src/test/java'
	}
	integration {
		java.srcDir 'src/integration/java'
		resources.srcDir 'src/integration/resources'
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

// Configuration
configurations {
	// Integration compile task
	integrationCompile.extendsFrom testCompile
	integrationRuntime.extendsFrom testRuntime
}

configurations.all {
	// Disable Gradle Caching
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

/**
 * Test Task `test` - Run Unit Tests
 */
test {
	useJUnit {
		includeCategories 'me.philippheuer.util.test.UnitTestCategory'
		excludeCategories 'me.philippheuer.util.test.IntegrationTestCategory'
	}
}

/**
 * Test Task `testIntegration` - Run Integration Tests
 */
task testIntegration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
	testClassesDir = sourceSets.integration.output.classesDir
	classpath = sourceSets.integration.runtimeClasspath

	useJUnit {
		includeCategories 'me.philippheuer.util.test.IntegrationTestCategory'
		excludeCategories 'me.philippheuer.util.test.UnitTestCategory'
	}
}

/**
 * Sources - build a jar with source files
 */
task sourcesJar(type: Jar, description: 'Builds the sourcesJar.', group: 'build') {
	from sourceSets.main.java.srcDirs
	classifier = 'sources'
}

/**
 * JavaDocs Generation
 */
javadoc {
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath

	// if not changed the destinationDir, the javadoc for production code is overridden.
	destinationDir = file("${buildDir}/../docs/javadoc")
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc, description: 'Builds the javadocJar.', group: 'build') {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

/**
 * Artifacts
 */
artifacts {
	archives sourcesJar
	archives javadocJar
}
