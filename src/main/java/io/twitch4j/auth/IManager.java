/*
 * MIT License
 *
 * Copyright (c) 2018 twitch4j
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.twitch4j.auth;

import io.twitch4j.TwitchBuilder;

import java.util.Set;

public interface IManager {
	/**
	 * Getting Credential Storage
	 * @return Credential Storage
	 */
	ICredentialStorage getCredentialStorage();

	/**
	 * Setting Credential Storage. <br>
	 * WARNING: Do not change credential storage if it is in use.
	 * @param credentialStorage Credential Storage defined by user via {@link ICredentialStorage} interface.
	 */
	void setCredentialStorage(ICredentialStorage credentialStorage);

	/**
	 * Building Authorization URL
	 * @param scopes List of {@link Scope}'s
	 * @param redirectUrl Your registered redirect URI. This must <i>exactly match</i> the redirect URI registered in the prior, <a href="https://dev.twitch.tv/docs/authentication#registration">Registration</a> step.
	 * @param state Your unique token, generated by your application. This is an OAuth 2.0 opaque value, used to avoid CSRF attacks. This value is echoed back in the response. <b>We strongly recommend you use this</b>.
	 * @return URL formatted for request authorization.
	 */
	String buildAuthorizationUrl(Set<Scope> scopes, String redirectUrl, String state);

	/**
	 * Generating Access Token
	 * @param code authorization code received after execute and authorized {@link IManager#buildAuthorizationUrl(Set, String, String)}.
	 * @param redirectUrl Your registered redirect URI. This must <i>exactly match</i> the redirect URI registered in the prior, <a href="https://dev.twitch.tv/docs/authentication#registration">Registration</a> step.
	 * @return Access Token, Refresh Token and authorized user via {@link ICredential#getUser()}. {@link ICredential#getIdToken()} will be empty if on {@link IAuthorization#isOpenIdConnect()} will be <b>false</b>
	 */
	ICredential generateAccessToken(String code, String redirectUrl) throws Exception;
	ICredential refreshToken(ICredential credential) throws Exception;
	void revokeToken(ICredential credential) throws Exception;
	void revokeToken(ICredential credential, boolean revokeOnly) throws Exception;
	ICredential rebuildCredentialData(ICredential credential) throws Exception;
	ICredential buildCredentialData(TwitchBuilder.Credentials credentialBuilder) throws Exception;
}
